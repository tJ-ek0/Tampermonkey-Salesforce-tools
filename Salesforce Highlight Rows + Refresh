// ==UserScript==
// @name         Salesforce List Markierung + Refresh
// @namespace    https://github.com/tJ-ek0/Tampermonkey-Salesforce-tools
// @version      4.0.0
// @description  Markiert Salesforce-Case-Listen farblich (Regeln), Export/Import, einstellbare Prioritäten; Auto-Refresh mit Countdown & Toggle; Steuerfenster unten mit Refresh-Optionen.
// @author       Tobias Jurgan - SIS Endress + Hauser (Deutschland) GmbH+Co.KG
// @license      MIT
// @match        https://endress.lightning.force.com/lightning/o/Case/*
// @grant        none
// @run-at       document-end
// @homepageURL  https://github.com/tJ-ek0/Tampermonkey-Salesforce-tools
// @supportURL   https://github.com/tJ-ek0/Tampermonkey-Salesforce-tools/issues
// @downloadURL  https://raw.githubusercontent.com/tJ-ek0/Tampermonkey-Salesforce-tools/main/Salesforce%20Highlight%20Rows%20%2B%20Refresh.user.js
// @updateURL    https://raw.githubusercontent.com/tJ-ek0/Tampermonkey-Salesforce-tools/main/Salesforce%20Highlight%20Rows%20%2B%20Refresh.user.js
// ==/UserScript==

(function () {
  'use strict';

  // ===== Storage Keys =====
  const LS_KEY = 'sfhl_config_v3';                   // aktuelle Konfiguration
  const LS_REFRESH_KEY = 'sfhl_refresh_secs_v1';     // Auto-Refresh-Intervall (Sek.)
  const LS_REFRESH_ENABLED = 'sfhl_refresh_enabled'; // Auto-Refresh aktiv?

  // ===== Defaults =====
  const BASE_DEFAULT = [
    { id: id(), term: '24/7, 2h, Visual Support, Smart Support',             color: '#ffcccc', priority: 30 },
    { id: id(), term: '8/5, 4h, Visual Support, Smart Support',              color: '#ffe5b4', priority: 30 },
    { id: id(), term: 'Support Case - SLA SOS',                              color: '#ffffcc', priority: 30 },
    { id: id(), term: 'Complaint - Prio',                                    color: '#ffd8b1', priority: 20 },
    { id: id(), term: 'ET:',                                                 color: '#f8d7da', priority: 30 }
  ];

  function id(){ return 'k' + Math.random().toString(36).slice(2,10); }
  function getDefaultConfig() { return BASE_DEFAULT.map(e => ({ ...e, id: e.id || id() })); }

  function loadConfig(){
    try{
      const r = localStorage.getItem(LS_KEY);
      if(!r) return getDefaultConfig();
      const p = JSON.parse(r);
      if(!Array.isArray(p)) throw 0;
      return p.map(e => ({
        id: e.id || id(),
        term: typeof e.term === 'string' ? e.term : '',
        color: e.color || '#ffffcc',
        priority: typeof e.priority === 'number' ? e.priority : 0
      }));
    } catch { return getDefaultConfig(); }
  }
  function saveConfig(c){ localStorage.setItem(LS_KEY, JSON.stringify(c)); }

  function loadRefreshSecs(){
    const n = parseInt(localStorage.getItem(LS_REFRESH_KEY), 10);
    return Number.isFinite(n) && n > 0 ? n : 60;
  }
  function saveRefreshSecs(n){
    const v = Math.max(5, Math.min(24*60*60, Math.round(n))); // 5s .. 24h
    localStorage.setItem(LS_REFRESH_KEY, String(v));
    return v;
  }
  function loadRefreshEnabled(){
    const raw = localStorage.getItem(LS_REFRESH_ENABLED);
    if (raw === null) return true; // Standard: EIN
    return raw === '1';
  }
  function saveRefreshEnabled(on){
    localStorage.setItem(LS_REFRESH_ENABLED, on ? '1' : '0');
  }

  let CONFIG = loadConfig();

  // ===== Styles =====
  injectStyle(`
    /* Markierung */
    .tm-sfhl-mark,
    .tm-sfhl-mark > td,
    .tm-sfhl-mark [role="gridcell"],
    .tm-sfhl-mark .slds-hint-parent,
    .tm-sfhl-mark .slds-cell-wrap { background-color: var(--sfhl-bg) !important; }

    /* Floating Button */
    .tm-sfhl-btn {
      position: fixed; right: 18px; bottom: 18px; z-index: 2147483647;
      padding: 11px 14px; border-radius: 12px; background: #1f2937;
      color: #fff; font: 600 13px/1 system-ui,-apple-system,Segoe UI,Roboto,Arial;
      box-shadow: 0 8px 24px rgba(0,0,0,.25); cursor: pointer; border: none; display: none;
    }
    .tm-sfhl-btn:hover { filter: brightness(1.05); }

    /* Panel */
    .tm-sfhl-panel {
      position: fixed; right: 18px; bottom: 74px; width: 520px; max-height: 82vh;
      background: #ffffff; color: #111; border-radius: 14px; border: 1px solid #e5e7eb;
      box-shadow: 0 24px 60px rgba(0,0,0,.28); z-index: 2147483647; display: none; overflow: hidden;
      font: 13px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Arial;
    }
    .tm-sfhl-panel.open { display: block; }
    .tm-sfhl-hdr { padding: 12px 14px; background: #111827; color: #fff; display:flex; align-items:center; justify-content: space-between; }

    .tm-sfhl-scroll { display: flex; flex-direction: column; max-height: calc(82vh - 48px); overflow: auto; }
    .tm-sfhl-content { padding: 10px 14px 8px; }

    /* Liste: TEXT (3fr) | FARBE (70px) | PRIO | ✓ | ✕ */
    .tm-sfhl-gridhead { display:grid; grid-template-columns: minmax(0,3fr) 70px 84px 28px 28px; gap:6px; font-weight:600; margin:8px 0; opacity:.7; }
    .tm-sfhl-list .tm-sfhl-row { display:grid; grid-template-columns: minmax(0,3fr) 70px 84px 28px 28px; gap:6px; align-items:center; margin-bottom:6px; }

    .tm-sfhl-row input[type="text"], .tm-sfhl-row input[type="number"] { width:100%; padding:8px 10px; border:1px solid #d1d5db; border-radius:8px; }
    .tm-sfhl-actions button { width:100%; height:34px; border:1px solid #d1d5db; border-radius:8px; background:#f9fafb; cursor:pointer; }
    .tm-sfhl-actions button:hover { background:#f3f4f6; }

    /* Farbfeld kompakt */
    .tm-sfhl-coloronly input[type="color"] {
      width: 100%;
      height: 28px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      padding: 0;
    }

    /* ✓-Button */
    .tm-sfhl-apply {
      height: 34px; border-radius: 8px; border: 1px solid #2563eb; background:#2563eb; color:#fff;
      cursor:pointer; display:flex; align-items:center; justify-content:center; font-size:16px; line-height:1;
    }
    .tm-sfhl-apply.pending { background:#1d4ed8; }

    /* Add-Zeile + Settings gemeinsam sticky unten */
    .tm-sfhl-addwrap {
      position: sticky; bottom: 0; background: #fff; padding: 10px 14px 12px;
      border-top: 1px solid #e5e7eb; box-shadow: 0 -6px 16px rgba(0,0,0,.06);
    }
    .tm-sfhl-addhead { display:grid; grid-template-columns: minmax(0,3fr) 40px 84px 44px; gap:8px; font-weight:600; font-size:12px; opacity:.7; margin:0 0 6px; }
    .tm-sfhl-add { display:grid; grid-template-columns: minmax(0,3fr) 40px 84px 44px; gap:8px; align-items:center; }
    .tm-sfhl-add .okbtn { height:36px; min-width:36px; border-radius:10px; border:1px solid #2563eb; background:#2563eb; color:#fff; cursor:pointer; display:inline-flex; align-items:center; justify-content:center; font-size:18px; line-height:1; }
    .tm-sfhl-add .okbtn:hover { filter:brightness(1.05); }
    .tm-sfhl-add input[type="text"], .tm-sfhl-add input[type="number"] { padding:8px 10px; border:1px solid #d1d5db; border-radius:8px; }
    .tm-sfhl-add input[type="color"] { height:28px; border:1px solid #d1d5db; border-radius:6px; padding:0; width:100%; }

    /* Settings (unten) */
    .tm-sfhl-settings {
      display:grid; grid-template-columns: auto 80px auto 110px; gap:8px;
      align-items:center; margin-top:10px; padding-top:8px; border-top:1px solid #e5e7eb;
    }
    .tm-sfhl-settings label { font-weight:600; opacity:.85; }
    .tm-sfhl-settings input[type="number"] {
      padding:6px 8px; border:1px solid #d1d5db; border-radius:8px; width:100%; height:28px;
    }
    .tm-sfhl-settings button {
      height:30px; border-radius:8px; border:1px solid #2563eb; background:#2563eb; color:#fff; cursor:pointer; padding:0 10px;
    }

    /* Toggle Switch (iOS-Style) */
    .tm-toggle { position: relative; width: 46px; height: 24px; display:inline-block; }
    .tm-toggle input { opacity:0; width:0; height:0; position:absolute; }
    .tm-toggle .slider {
      position:absolute; cursor:pointer; top:0; left:0; right:0; bottom:0;
      background:#d1d5db; transition:.2s; border-radius:999px;
    }
    .tm-toggle .slider:before {
      position:absolute; content:""; height:18px; width:18px; left:3px; top:3px;
      background:white; transition:.2s; border-radius:999px; box-shadow:0 1px 3px rgba(0,0,0,.2);
    }
    .tm-toggle input:checked + .slider { background:#2563eb; }
    .tm-toggle input:checked + .slider:before { transform: translateX(22px); }

    .tm-sfhl-footer { display:flex; gap:8px; margin-top:8px; flex-wrap:wrap; }
    .tm-sfhl-footer button { padding:6px 10px; border-radius:8px; border:1px solid #d1d5db; background:#f9fafb; cursor:pointer; }
    .tm-sfhl-footer button:hover { background:#f3f4f6; }
    .tm-sfhl-badge { display:inline-block; padding:2px 8px; border-radius:999px; background:#eef2ff; color:#3730a3; font-weight:600; font-size:11px; }
  `);

  // ===== UI =====
  const btn = document.createElement('button');
  btn.className = 'tm-sfhl-btn';
  btn.textContent = 'Addon Steuerung';
  document.documentElement.appendChild(btn);

  const panel = document.createElement('div');
  panel.className = 'tm-sfhl-panel';
  panel.innerHTML = `
    <div class="tm-sfhl-hdr">
      <div>Salesforce List Markierung + Refresh <span class="tm-sfhl-badge">Prio: höher gewinnt</span></div>
      <button title="Schließen" style="border:none;background:transparent;color:#fff;cursor:pointer;font-size:18px;line-height:1">✕</button>
    </div>
    <div class="tm-sfhl-scroll">
      <div class="tm-sfhl-content">
        <div class="tm-sfhl-gridhead">
          <div>Wort/Stichwort</div><div>Farbe</div><div>Prio</div><div>✓</div><div>✕</div>
        </div>
        <div class="tm-sfhl-list"></div>

        <div class="tm-sfhl-footer">
          <button class="tm-sfhl-reset">Auf Standard</button>
          <button class="tm-sfhl-export">Export</button>
          <button class="tm-sfhl-import">Import</button>
        </div>
      </div>

      <!-- Sticky unten: Add-Zeile + Auto-Refresh-Settings -->
      <div class="tm-sfhl-addwrap">
        <div class="tm-sfhl-addhead"><div>Wort/Stichwort</div><div>Farbe</div><div>Prio</div><div>✓</div></div>
        <form class="tm-sfhl-add" autocomplete="off">
          <input type="text" placeholder="Neuer Wert…" title="Wort/Stichwort" class="add-term">
          <input type="color" value="#e6ffe6" title="Farbe" class="add-color">
          <input type="number" value="5" step="1" title="Priorität (höher = gewinnt)" class="add-prio">
          <button type="submit" class="okbtn" title="Hinzufügen" aria-label="Hinzufügen">✓</button>
        </form>

        <div class="tm-sfhl-settings">
          <label for="sfhl-refresh-secs">Auto-Refresh (Sek.)</label>
          <input id="sfhl-refresh-secs" type="number" min="5" step="5" placeholder="60">
          <label title="Auto-Refresh ein/aus" style="display:flex;align-items:center;gap:8px;">
            <span>Auto-Refresh</span>
            <span class="tm-toggle">
              <input id="sfhl-refresh-enabled" type="checkbox">
              <span class="slider"></span>
            </span>
          </label>
          <button class="tm-sfhl-apply-refresh" title="Intervall übernehmen">Übernehmen</button>
        </div>
      </div>
    </div>
  `;
  document.documentElement.appendChild(panel);

  btn.onclick = () => panel.classList.toggle('open');
  panel.querySelector('.tm-sfhl-hdr button').onclick = () => panel.classList.remove('open');

  const listEl        = panel.querySelector('.tm-sfhl-list');
  const addForm       = panel.querySelector('.tm-sfhl-add');
  const addTermEl     = panel.querySelector('.add-term');
  const addColorEl    = panel.querySelector('.add-color');
  const addPrioEl     = panel.querySelector('.add-prio');

  const refreshInput  = panel.querySelector('#sfhl-refresh-secs');
  const refreshApplyBtn = panel.querySelector('.tm-sfhl-apply-refresh');
  const refreshEnabledCb = panel.querySelector('#sfhl-refresh-enabled');

  // Init Settings
  refreshInput.value = String(loadRefreshSecs());
  refreshEnabledCb.checked = loadRefreshEnabled();

  // verstecktes File-Input für Import
  const fileInput = document.createElement('input');
  fileInput.type = 'file';
  fileInput.accept = '.txt,.json,application/json,text/plain';
  fileInput.style.display = 'none';
  document.documentElement.appendChild(fileInput);

  // Add-Form
  addForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const term = (addTermEl.value || '').trim();
    if (!term) { addTermEl.focus(); return; }
    const color = addColorEl.value || '#ffffcc';
    const priority = parseInt(addPrioEl.value, 10) || 0;
    CONFIG.push({ id: id(), term, color, priority });
    saveConfig(CONFIG);
    renderList();
    rescanAllSoon(true);
    addTermEl.value = '';
    addTermEl.focus();
  });

  // Reset auf Skript-Defaults
  panel.querySelector('.tm-sfhl-reset').onclick  = () => {
    if (!confirm('Auf Skript-Standard (im Code hinterlegte Regeln) zurücksetzen?')) return;
    CONFIG = getDefaultConfig();
    saveConfig(CONFIG);
    renderList();
    rescanAllSoon(true);
  };

  // Export / Import
  panel.querySelector('.tm-sfhl-export').onclick = () => {
    try {
      const data = JSON.stringify(CONFIG, null, 2);
      const blob = new Blob([data], { type: 'application/json;charset=utf-8' });
      const a = document.createElement('a');
      const ts = new Date();
      const pad = (n)=>String(n).padStart(2,'0');
      const filename = `sfhl_export_${ts.getFullYear()}-${pad(ts.getMonth()+1)}-${pad(ts.getDate())}_${pad(ts.getHours())}-${pad(ts.getMinutes())}.txt`;
      a.href = URL.createObjectURL(blob);
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      URL.revokeObjectURL(a.href);
      a.remove();
    } catch (err) {
      console.error(err);
      alert('Export fehlgeschlagen.');
    }
  };
  panel.querySelector('.tm-sfhl-import').onclick = () => { fileInput.value = ''; fileInput.click(); };
  fileInput.addEventListener('change', async (e) => {
    const file = e.target.files && e.target.files[0];
    if (!file) return;
    try {
      const text = await file.text();
      const p = JSON.parse(text);
      if (!Array.isArray(p)) throw new Error('Kein Array');
      CONFIG = p.map(e => ({
        id: e.id || id(),
        term: String(e.term || ''),
        color: e.color || '#ffffcc',
        priority: Number.isFinite(e.priority) ? e.priority : 0
      }));
      saveConfig(CONFIG);
      renderList(); rescanAllSoon(true);
      alert('Import erfolgreich.');
    } catch (err) {
      console.error(err);
      alert('Import fehlgeschlagen: Ungültiges Format (Array von Objekten mit term, color, priority).');
    }
  });

  // ===== Liste rendern =====
  function renderList() {
    const sorted = CONFIG.slice().sort((a,b)=>b.priority - a.priority || a.term.localeCompare(b.term));
    listEl.innerHTML = '';
    for (const item of sorted) {
      const row = document.createElement('div');
      row.className = 'tm-sfhl-row';
      row.innerHTML = `
        <input type="text" value="${escapeHtml(item.term)}" title="${escapeHtml(item.term)}" data-id="${item.id}" class="term">
        <div class="tm-sfhl-coloronly">
          <input type="color" value="${item.color}" data-id="${item.id}" class="color">
        </div>
        <input type="number" value="${item.priority}" step="1" data-id="${item.id}" class="prio">
        <button class="tm-sfhl-apply" title="Farbe übernehmen" data-id="${item.id}">✓</button>
        <div class="tm-sfhl-actions"><button class="del" title="Löschen">✕</button></div>
      `;
      listEl.appendChild(row);
    }

    // Events
    listEl.querySelectorAll('.term').forEach(inp => inp.onchange = e => {
      const it = CONFIG.find(x=>x.id === e.target.dataset.id); if (!it) return;
      it.term = e.target.value; saveConfig(CONFIG); rescanAllSoon(true);
    });

    listEl.querySelectorAll('.color').forEach(inp => {
      inp.addEventListener('input', (e) => {
        const applyBtn = e.target.closest('.tm-sfhl-row').querySelector('.tm-sfhl-apply');
        applyBtn.classList.add('pending');
      });
      inp.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          const applyBtn = e.target.closest('.tm-sfhl-row').querySelector('.tm-sfhl-apply');
          applyBtn.click();
        }
      });
    });

    listEl.querySelectorAll('.tm-sfhl-apply').forEach(btn => {
      btn.onclick = (e) => {
        const id = e.currentTarget.dataset.id;
        const row = e.currentTarget.closest('.tm-sfhl-row');
        const input = row.querySelector('.color');
        const it = CONFIG.find(x=>x.id === id); if (!it) return;
        it.color = input.value || '#ffffcc';
        saveConfig(CONFIG);
        e.currentTarget.classList.remove('pending');
        highlightRows(true);
      };
    });

    listEl.querySelectorAll('.prio').forEach(inp => inp.onchange = e => {
      const it = CONFIG.find(x=>x.id === e.target.dataset.id); if (!it) return;
      it.priority = parseInt(e.target.value,10) || 0; saveConfig(CONFIG); renderList(); rescanAllSoon(true);
    });

    listEl.querySelectorAll('.del').forEach(btn => btn.onclick = e => {
      const id = e.target.closest('.tm-sfhl-row').querySelector('.term').dataset.id;
      CONFIG = CONFIG.filter(x=>x.id !== id); saveConfig(CONFIG); renderList(); rescanAllSoon(true);
    });
  }
  renderList();

  // ===== Markier-Logik =====
  const ABS_XPATH = '/html/body/div[4]/div[1]/section/div[1]/div/div[2]/div[1]/div/div/div/div/div/div/div/lst-object-home/div/lst-list-view-manager/lst-common-list-internal/div//tr';
  const FALLBACK_XPATH = '//lst-list-view-manager//div//tr | //lst-list-view-manager//tr';

  function getRowsSnapshot(){
    try{
      let s = document.evaluate(ABS_XPATH, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      if (s.snapshotLength > 0) return s;
      return document.evaluate(FALLBACK_XPATH, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    } catch { return { snapshotLength: 0, snapshotItem: () => null }; }
  }
  function norm(s){ return (s||'').toString().toLowerCase(); }
  function bestMatchForText(txt){
    if(!txt) return null;
    const low = norm(txt);
    let best = null;
    for (const e of CONFIG) {
      if (!e.term) continue;
      if (low.includes(norm(e.term))) {
        if (!best || e.priority > best.priority) best = e;
      }
    }
    return best; // { term, color, priority }
  }
  function markRow(row, match){
    const curP = Number(row.dataset.sfhlPriority || '-1');
    if (curP >= (match.priority||0) && row.classList.contains('tm-sfhl-mark')) return;
    row.classList.add('tm-sfhl-mark');
    row.style.setProperty('--sfhl-bg', match.color, 'important');
    row.dataset.sfhlPriority = String(match.priority||0);
  }
  function unmarkRow(row){
    row.classList.remove('tm-sfhl-mark');
    row.style.removeProperty('--sfhl-bg');
    delete row.dataset.sfhlPriority;
  }
  function highlightRows(fullRecalc=false){
    const snap = getRowsSnapshot();
    if (snap.snapshotLength === 0) return false;
    for (let i=0; i<snap.snapshotLength; i++) {
      const row = snap.snapshotItem(i);
      if (!row) continue;
      if (fullRecalc) unmarkRow(row);
      const cells = row.querySelectorAll('td');
      let text = '';
      for (const c of cells) text += ' ' + (c.innerText || c.textContent || '');
      const match = bestMatchForText(text);
      if (match) markRow(row, match);
      else if (fullRecalc) unmarkRow(row);
    }
    return true;
  }

  // ===== Sichtbarkeit nur auf Case-List =====
  function isCaseListPage(){ return location.href.startsWith('https://endress.lightning.force.com/lightning/o/Case/'); }
  function updateButtonVisibility(){
    const visible = isCaseListPage();
    btn.style.display = visible ? 'inline-block' : 'none';
    if (!visible) panel.classList.remove('open');
  }
  updateButtonVisibility();

  const origPush = history.pushState;
  history.pushState = function(){
    const r = origPush.apply(this, arguments);
    setTimeout(() => { updateButtonVisibility(); highlightRows(true); }, 100);
    setTimeout(() => { restartAutoRefreshIfEnabled(); }, 500);
    return r;
  };
  window.addEventListener('popstate', () => {
    setTimeout(() => { updateButtonVisibility(); highlightRows(true); }, 100);
    setTimeout(() => { restartAutoRefreshIfEnabled(); }, 500);
  });
  setInterval(() => { if (isCaseListPage()) highlightRows(); }, 5000);

  // ===== Auto-Refresh mit Countdown =====
  const REFRESH_XPATH = "//*[@id='brandBand_1']/div/div/div/div/lst-object-home/div/lst-list-view-manager/lst-common-list-internal/lst-list-view-manager-header/div/div[2]/div[4]/lst-list-view-manager-button-bar/div/div[1]/lightning-button-icon/button";

  let countdownIntervalId = null;
  let refreshIntervalId = null;
  let observer = null;
  let pollId = null;
  let nextRefreshAt = null;

  function getRefreshButton() {
    return document
      .evaluate(REFRESH_XPATH, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null)
      .singleNodeValue;
  }

  function clearCountdown() {
    if (countdownIntervalId) {
      clearInterval(countdownIntervalId);
      countdownIntervalId = null;
    }
  }

  function clearMainInterval() {
    if (refreshIntervalId) {
      clearInterval(refreshIntervalId);
      refreshIntervalId = null;
    }
  }

  function setButtonLabel(btn, secs) {
    if (!btn) return;
    btn.innerText = String(secs);
    btn.title = `Automatischer Refresh in ${secs} Sek.`;
  }
  function setButtonDisabledLabel() {
    const btn = getRefreshButton();
    if (!btn) return;
    btn.innerText = ''; // Countdown entfernen
    btn.title = 'Auto-Refresh aus';
  }

  function startCountdown(intervalSecs) {
    const btn = getRefreshButton();
    if (!btn) return;

    clearCountdown();
    nextRefreshAt = Date.now() + intervalSecs * 1000;

    setButtonLabel(btn, intervalSecs);

    countdownIntervalId = setInterval(() => {
      const remainingMs = Math.max(0, nextRefreshAt - Date.now());
      const secs = Math.ceil(remainingMs / 1000);
      const buttonNow = getRefreshButton(); // Button kann neu gerendert werden
      if (buttonNow) setButtonLabel(buttonNow, secs);

      if (remainingMs <= 0) {
        clearCountdown();
      }
    }, 1000);
  }

  function clickRefreshButton() {
    const btn = getRefreshButton();
    if (btn) { btn.click(); }
  }

  function startMainLoop() {
    const INTERVAL_SECONDS = loadRefreshSecs();
    if (!loadRefreshEnabled()) { // falls zwischenzeitlich deaktiviert
      stopAutoRefresh();
      return;
    }

    clearMainInterval();
    clearCountdown();

    startCountdown(INTERVAL_SECONDS);

    refreshIntervalId = setInterval(() => {
      const btn = getRefreshButton();
      if (!btn) {
        // Button verschwunden – erneut warten & neu starten
        waitForButtonThen(startMainLoop);
        clearMainInterval();
        clearCountdown();
        return;
      }
      clickRefreshButton();
      startCountdown(INTERVAL_SECONDS); // Countdown neu starten
    }, INTERVAL_SECONDS * 1000);
  }

  function stopAutoRefresh() {
    clearMainInterval();
    clearCountdown();
    setButtonDisabledLabel();
  }

  function restartAutoRefreshIfEnabled() {
    if (loadRefreshEnabled()) {
      waitForButtonThen(startMainLoop);
    } else {
      stopAutoRefresh();
    }
  }

  function waitForButtonThen(onFound) {
    // Bereits vorhanden?
    const immediate = getRefreshButton();
    if (immediate) {
      onFound?.();
      return;
    }

    // Sauber machen, falls schon ein Observer/Poll läuft
    if (observer) { observer.disconnect(); observer = null; }
    if (pollId) { clearInterval(pollId); pollId = null; }

    // MutationObserver: reagiert auf DOM-Änderungen
    observer = new MutationObserver(() => {
      if (getRefreshButton()) {
        observer.disconnect(); observer = null;
        if (pollId) { clearInterval(pollId); pollId = null; }
        onFound?.();
      }
    });
    observer.observe(document.documentElement || document.body, { childList: true, subtree: true });

    // Fallback: Polling alle 1000 ms
    pollId = setInterval(() => {
      if (getRefreshButton()) {
        if (observer) { observer.disconnect(); observer = null; }
        clearInterval(pollId); pollId = null;
        onFound?.();
      }
    }, 1000);
  }

  // Start bei Seiten-Ladevorgang
  window.addEventListener('load', () => {
    setTimeout(() => { restartAutoRefreshIfEnabled(); }, 800);
  });

  // Einstellung: Intervall übernehmen
  refreshApplyBtn.addEventListener('click', () => {
    const v = parseInt(refreshInput.value, 10);
    const secs = saveRefreshSecs(Number.isFinite(v) ? v : 60);
    refreshInput.value = String(secs);
    restartAutoRefreshIfEnabled();
    alert(`Auto-Refresh-Intervall gesetzt auf ${secs} Sekunden.`);
  });

  // Einstellung: Toggle Switch
  refreshEnabledCb.addEventListener('change', () => {
    const enabled = !!refreshEnabledCb.checked;
    saveRefreshEnabled(enabled);
    if (enabled) {
      restartAutoRefreshIfEnabled();
    } else {
      stopAutoRefresh();
      alert('Auto-Refresh deaktiviert.');
    }
  });

  // ===== Trigger =====
  function rescanAllSoon(full=false){
    clearTimeout(rescanAllSoon._t);
    rescanAllSoon._t = setTimeout(() => highlightRows(full), 50);
  }
  (function earlyKickoff(){
    let tries = 0;
    const id = setInterval(() => {
      if (!isCaseListPage()) { clearInterval(id); return; }
      if (highlightRows()) clearInterval(id);
      if (++tries > 120) clearInterval(id);
    }, 200);
  })();

  const observerHL = new MutationObserver(muts => {
    for (const mu of muts) {
      if (mu.addedNodes && mu.addedNodes.length) {
        for (const node of mu.addedNodes) {
          if (!(node instanceof Element)) continue;
          if (node.matches?.('tr, table') || node.querySelector?.('tr, table')) { rescanAllSoon(); return; }
        }
      }
      if (mu.type === 'characterData') { rescanAllSoon(); return; }
    }
  });
  observerHL.observe(document.body, { childList: true, subtree: true, characterData: true });

  setInterval(() => { if (isCaseListPage()) highlightRows(); }, 5000);

  // ===== utils =====
  function injectStyle(css){
    const id = 'tm-sfhl-style-ui';
    if (document.getElementById(id)) return;
    const st = document.createElement('style');
    st.id = id; st.textContent = css;
    (document.head || document.documentElement).appendChild(st);
  }
  function escapeHtml(s){
    return String(s).replace(/[&<>"']/g, m => ({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[m]));
  }
})();
